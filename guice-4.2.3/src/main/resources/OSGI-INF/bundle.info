\u001B[1mSYNOPSIS\u001B[0m
    ${project.description}

    Original Maven URL:
        \u001B[33mmvn:http://guiceyfruit.googlecode.com/svn/repo/releases:${pkgGroupId}/guiceyfruit-core/${pkgVersion}\u001B[0m
        \u001B[33mmvn:http://guiceyfruit.googlecode.com/svn/repo/releases:${pkgGroupId}/guice-all/${pkgVersion}\u001B[0m

\u001B[1mDESCRIPTION\u001B[0m
    Put simply, Guice alleviates the need for factories and the use of new
    in your Java code. Think of Guice's @Inject as the new new. You will
    still need to write factories in some cases, but your code will not depend
    directly on them. Your code will be easier to change, unit test and reuse in
    other contexts.

    Guice embraces Java's type safe nature, especially when it comes to features
    introduced in Java 5 such as generics and annotations. You might think of
    Guice as filling in missing features for core Java. Ideally, the language
    itself would provide most of the same features, but until such a language
    comes along, we have Guice.

    Guice helps you design better APIs, and the Guice API itself sets a good
    example. Guice is not a kitchen sink. We justify each feature with at least
    three use cases. When in doubt, we leave it out. We build general functionality
    which enables you to extend Guice rather than adding every feature to the core
    framework.

    Guice aims to make development and debugging easier and faster, not harder and
    slower. In that vein, Guice steers clear of surprises and magic. You should be
    able to understand code with or without tools, though tools can make things even
    easier. When errors do occur, Guice goes the extra mile to generate helpful
    messages.

\u001B[1mSEE ALSO\u001B[0m
    \u001B[36mhttp://code.google.com/p/google-guice/\u001B[0m
